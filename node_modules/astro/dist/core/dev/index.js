import { performance } from "perf_hooks";
import * as vite from "vite";
import {
  runHookConfigDone,
  runHookConfigSetup,
  runHookServerDone,
  runHookServerSetup,
  runHookServerStart
} from "../../integrations/index.js";
import { createVite } from "../create-vite.js";
import { info, warn } from "../logger/core.js";
import * as msg from "../messages.js";
import { apply as applyPolyfill } from "../polyfill.js";
async function dev(settings, options) {
  var _a, _b, _c;
  const devStart = performance.now();
  applyPolyfill();
  await options.telemetry.record([]);
  settings = await runHookConfigSetup({ settings, command: "dev", logging: options.logging });
  const { host, port } = settings.config.server;
  const { isRestart = false } = options;
  const rendererClientEntries = settings.renderers.map((r) => r.clientEntrypoint).filter(Boolean);
  const viteConfig = await createVite(
    {
      mode: "development",
      server: { host },
      optimizeDeps: {
        include: rendererClientEntries
      }
    },
    { settings, logging: options.logging, mode: "dev" }
  );
  await runHookConfigDone({ settings, logging: options.logging });
  const viteServer = await vite.createServer(viteConfig);
  runHookServerSetup({ config: settings.config, server: viteServer, logging: options.logging });
  await viteServer.listen(port);
  const devServerAddressInfo = viteServer.httpServer.address();
  const site = settings.config.site ? new URL(settings.config.base, settings.config.site) : void 0;
  info(
    options.logging,
    null,
    msg.devStart({
      startupTime: performance.now() - devStart,
      config: settings.config,
      devServerAddressInfo,
      site,
      https: !!((_a = viteConfig.server) == null ? void 0 : _a.https),
      isRestart
    })
  );
  const currentVersion = "1.2.6";
  if (currentVersion.includes("-")) {
    warn(options.logging, null, msg.prerelease({ currentVersion }));
  }
  if (((_c = (_b = viteConfig.server) == null ? void 0 : _b.fs) == null ? void 0 : _c.strict) === false) {
    warn(options.logging, null, msg.fsStrictWarning());
  }
  await runHookServerStart({
    config: settings.config,
    address: devServerAddressInfo,
    logging: options.logging
  });
  return {
    address: devServerAddressInfo,
    get watcher() {
      return viteServer.watcher;
    },
    stop: async () => {
      await viteServer.close();
      await runHookServerDone({ config: settings.config, logging: options.logging });
    }
  };
}
export {
  dev as default
};
